
#include "console.h"
#include <common>
#include <system>

/* ---------- actions implementation ----------- */

#if CONSOLE_ENABLED == 1

const char* RESPONSE_OK = ":)\n";
const char* RESPONSE_FAIL = ":(\n";

static void fail() { System::Bus::UART::write_waiting(RESPONSE_FAIL); }

void hey() {
    System::Bus::UART::write_waiting(RESPONSE_OK);
}

static void hex(unsigned int _index) {
    System::Registry::IntegerValue index = static_cast<System::Registry::IntegerValue>(_index);
    if(index < System::Registry::VALUES_END) {
	System::Bus::UART::write_waiting(b32tohex(System::Registry::value(index)));
	System::Bus::UART::write_waiting("\n");
    } else fail();
}

static void dec(unsigned int _index) {
    System::Registry::IntegerValue index = static_cast<System::Registry::IntegerValue>(_index);
    if(index < System::Registry::VALUES_END) {
	System::Bus::UART::write_waiting(b32todec(System::Registry::value(index)));
	System::Bus::UART::write_waiting("\n");
    } else fail();
}

static void fl32(unsigned int _index) {
    System::Registry::FloatValue index = static_cast<System::Registry::FloatValue>(_index);
    if(index < System::Registry::FLOAT_VALUES_END) {
	System::Bus::UART::write_waiting(f32todec(System::Registry::value(index)));
	System::Bus::UART::write_waiting("\n");
    } else fail();
}

static void set_dec(unsigned int _index, int value) {
    System::Registry::IntegerValue index = static_cast<System::Registry::IntegerValue>(_index);
    if(index < System::Registry::VALUES_END) {
	System::Registry::set(index, value);
	System::Bus::UART::write_waiting(RESPONSE_OK);
    } else fail();
}

%%{
    machine parseConsoleMessage;
}%%

void parseConsoleMessage(const char* str) {
    const int MAX_ARGS = 2;
    int arg_idx = 0;
    int arg[MAX_ARGS] = {0};
    char arg_sign = '+';
    const char *p = str;
    int cs;
    %%{
	action arg {  
	    arg[arg_idx] = arg[arg_idx] * 10 + (fc - '0'); 
	}
	action arg_idx_inc { 
	    if(arg_sign == '-') {
		arg_sign = '+';
		arg[arg_idx] = -arg[arg_idx];
	    }
	    arg_idx++; 
	}
	action arg_sign { if(fc == '-') arg_sign = '-'; }
	action hey { hey(); }
	action hex { hex(arg[0]); }
	action set_hex { set_hex(arg[0], arg[1]); }
	action dec { dec(arg[0]); }
	action set_dec { set_dec(arg[0], arg[1]); }
	action f32 { fl32(arg[0]); }

	# exactly one command followed by either \n or \r
	signed_numeric = ('+' | '-')? @arg_sign ' '* digit+ @arg;
	unsigned_numeric = digit+ @arg;
	snumarg = ' '+ signed_numeric %arg_idx_inc;
	unumarg = ' '+ unsigned_numeric %arg_idx_inc;
	main := 	' '*
			('hey' @hey |
			 ('get_f32' unumarg) %f32|
			 ('get_hex' unumarg) %hex|
			 ('get_dec' unumarg) %dec|
			 ('set_dec' unumarg snumarg) %set_dec
			)
			' '*
			(0 | '\n' | '\r') @{fbreak;};
	# Initialize and execute.
        write data noerror;
	write init;
	write exec noend;
    }%%
    if (cs < parseConsoleMessage_first_final) 
	System::Bus::UART::write_waiting(":?\n");
}

#endif